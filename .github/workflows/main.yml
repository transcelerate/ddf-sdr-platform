# This is a basic workflow to help you get started with Actions

name: CICD_main_Demo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
       inputs:
          tag:
           description: 'Demo Build'
jobs:
  
  ############################-----------------Validation Stage--------------------###################################
  
  Check_Validation:
    runs-on: ubuntu-latest
    environment: DEMO
    # The agent type used to build and deploy
    env:
      # Environment variables used in different stages, all are defined globally to be used
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCEGROUP }}
      STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGEACCOUNT }}
      CONTAINER_NAME: ${{ secrets.AZURE_CONTAINERNAME }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      Blob_Key: ${{ secrets.AZURE_RMKEY}}
      
      # group refers to the name of the env which we need to create in azure portal
      group: demo
    steps:
      # Step to Login to Azure Portal
    - uses: actions/checkout@v2
    - # "Note: the 'AZURE_SP' secret is required to be added into GitHub Secrets. See this blog post for details: https://samlearnsazure.blog/2019/12/13/github-actions/"
      name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}
    

     
    - name: Find and Replace User Name - Using Build Variable
      # This step will replace all the variables in variables.tf file while fetching the value from secrets
      run: |
        find variables.tf -type f -exec sed -i ''s/#{Env}#/${{ secrets.Env }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Vnet-IP}#/'${{ secrets.Vnet_IP }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-IP}#/'${{ secrets.Subnet_IP }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress1}#/'${{ secrets.Subnet_Dsaddress1 }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress2}#/'${{ secrets.Subnet_Dsaddress2 }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress3}#/'${{ secrets.Subnet_Dsaddress3 }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Publisher-Email}#/'${{ secrets.Publisher_Email }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Serviceprincipal}#/${{ secrets.Serviceprincipal }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Publisher-Name}#/${{ secrets.Publisher_Name }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{ADgroup1}#/${{ secrets.ADgroup1 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{ADgroup2}#/${{ secrets.ADgroup2 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{ADgroup3}#/${{ secrets.ADgroup3 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{subscription}#/${{ secrets.subscription  }}/g'' {} \;
        
      
    - name: Install Python 3.7
      # Install python required for the setup
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
        
    - name: Install pip3
      # Install pip required for the setup
      run: python -m pip install --upgrade pip setuptools wheel
      
    - name: Install Checkov using pip3
      # Install checkov for checkov_validation step
      run: pip3 install checkov
      
    - name: Security test with Checkov
      # Run the security check on the code
      run: checkov -d '${{ github.workspace }}' -o junitxml -s >> checkov_sectests.xml
      
    - name: Publish Security Test Results (Checkov)
      # Publish the security check xml file
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: test-results/**/*.xml   
        
    - name: Terraform Install
      # task will install the terraform and it's dependencies on microsoft hosted agents to deploy the resources
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.11
        
    - name: Terraform Init
      # initializes the terrafrom configuration files
      # The three variables are required to explicitly define in init for terraform to read it
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"  -backend-config="key=$Blob_Key" 
    
    - name: Terraform Validate
      # task validates the terraform configuration files and displays the errors if any
      run: terraform validate -var "display_name=name"
      
#############################-------------------Deployment Stage----------------##################################   
      
  Deploy:
    needs: Check_Validation 
    # needs is passed here so that this job run after Check_Validation job
    runs-on: ubuntu-latest
    # The agent type used to build and deploy
    environment: DEMO
    env:
      # Environment variables used in different stages, all are defined globally to be used
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCEGROUP }}
      STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGEACCOUNT }}
      CONTAINER_NAME: ${{ secrets.AZURE_CONTAINERNAME }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      Blob_Key: ${{ secrets.AZURE_RMKEY}}
      
    steps:
    - uses: actions/checkout@v2

    - name: Find and Replace User Name - Using Build Variable
       # This step will replace all the variables in variables.tf file while fetching the value from secrets
      run: |
        find variables.tf -type f -exec sed -i ''s/#{Env}#/${{ secrets.Env }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Vnet-IP}#/'${{ secrets.Vnet_IP }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-IP}#/'${{ secrets.Subnet_IP }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress1}#/'${{ secrets.Subnet_Dsaddress1 }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress2}#/'${{ secrets.Subnet_Dsaddress2 }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress3}#/'${{ secrets.Subnet_Dsaddress3 }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Publisher-Email}#/'${{ secrets.Publisher_Email }}'/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Serviceprincipal}#/${{ secrets.Serviceprincipal }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Publisher_Name}#/${{ secrets.Publisher_Name }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{ADgroup1}#/${{ secrets.ADgroup1 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{ADgroup2}#/${{ secrets.ADgroup2 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{ADgroup3}#/${{ secrets.ADgroup3 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{subscription}#/${{ secrets.subscription  }}/g'' {} \;
              
     
    - name: Terraform Install
      # task will install the terraform and it's dependencies on microsoft hosted agents to deploy the resources
      uses: hashicorp/setup-terraform@v1
      with:
         terraform_version: 0.14.11
         
    - name: Terraform Init
      # initializes the terrafrom configuration files
      run:  terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"  -backend-config="key=$Blob_Key" 
      
    - name: Terraform Plan
      # task creates an execution plan which lets us to review the changes made to the environment before applying the changes
      run: terraform plan
       
#     - name: Terraform Apply
#       # task execute the actions proposed in the terraform plan
#       run: terraform apply -auto-approve
                    
   
                    
